
Bedingte Ausführung
===================

In den vorherigen Kapiteln haben wir den Python Interpreter eher wie einen Taschenrechner benutzt. Wir haben Werte definiert oder eingegeben, den Werten Namen gegeben und Berechnungen mit diesen Werten angestellt.
Vieles, was Computerprogramme ausmacht, kann man damit nicht erreichen.

Ein wichtiges Konzept, das uns fehlt, ist der sogenannte *Kontrollfluss*.
Dabei handelt es sich, grob gesagt, um das Steuern von Abläufen im Programm.
Nehmen wir an, wir fragen den Benutzer nach der Eingabe eines Zeichens und nur wenn das Zeichen kein `q` (für *quit*) ist, soll das Programm weiter laufen.

Wie wir die Eingabe erledigen, kennen wir bereits, nicht aber wie wir feststellen können, ob das gelesene Zeichen ein `q`ist. Außerdem wissen wir noch nicht, wie man die Ausführung bestimmter Anweisungen von dem Ergebnis einer solchen Überprüfung abhängig macht.
Glücklicherweise brauchen wir dazu nicht viel Neues und nach dem Lesen der folgenden Seiten wird ihnen klar sein, wie man solche Aufgaben mit Python erledigt.    

Boolesche Ausdrücke
-------------------

\index{boolescher Ausdruck}
\index{Ausdruck!boolescher}
\index{logischer Operator}
\index{Operator!logischer}

Um eine bedingte Ausführung programmieren zu können, müssen wir zunächst Bedingungen überprüfen.
Dazu benötigen wir eine spezielle Form von Ausdrücken, die sich nicht wie bisher gesehen, zu einem allgemeinen Wert (Zahl, Zeichenkette, etc.) ableiten lassen, sondern zu einem *Wahrheitswert*.

Einen solchen Ausdruck, der im Ergebnis entweder wahr oder falsch ist, nennt man *booleschen Ausdruck*. Die folgenden Beispiele verwenden den Operator `==`, der zwei Werte (die sogenannten *Operanden*) vergleicht und `True` erzeugt, wenn sie gleich sind, und sonst `False`:

~~~~ {.python .trinket}
>>> 5 == 5
True
>>> 5 == 6
False
~~~~

`True` und `False` sind spezielle Werte, die zur Klasse `bool` gehören; sie sind keine Zeichenketten, sondern die beiden logischen Werte *wahr* und *falsch*:

\index{True (Wahrheitswert)}
\index{False (Wahrheitswert)}
\index{Wert!True}
\index{Wert!False}
\index{bool Datentyp}
\index{Datentyp!bool}

~~~~ {.python}
>>> type(True)
<class 'bool'>
>>> type(False)
<class 'bool'>
~~~~

Der Operator `==` ist ein *Vergleichsoperator*. Wenn man einen solchen Operator zwei Operanden vergleicht, erhält man einen Wahrheitswert zurück. Neben dem Vergleich auf *Gleichheit* gibt es noch einige weitere *Vergleichsoperatoren*. Diese sind:

~~~~ {.python}
x != y               # x ist ungleich y
x > y                # x ist groesser als y
x < y                # x ist kleiner als y
x >= y               # x ist groesser oder gleich y
x <= y               # x ist kleiner oder gleich y
x is y               # x bezeichnet das selbe Objekt wie y
x is not y           # x bezeichnet nicht das selbe Objekt wie y
~~~~

Obwohl Ihnen diese Operationen wahrscheinlich bekannt sind, unterscheiden sich die Python-Symbole von den mathematischen Symbolen für dieselben Operationen. Ein häufiger Fehler ist die Verwendung eines einfachen Gleichheitszeichens (`=`) anstelle eines doppelten Gleichheitszeichens (`==`). Wir müssen daran denken, dass `=` ein Zuweisungsoperator und `==` ein Vergleichsoperator ist. So etwas wie `=<` oder `=>` gibt es nicht.

Etwas unklar mag Ihnen zum jetzigen Zeitpunkt der Unterschied zwischen `==` und `is` erscheinen.
Um das zu erklären, muss man etwas mehr über die Funktionsweise der Programmiersprache selbst verstehen.
Kurz gesagt, vergleicht `==` Werte und `is` Objekte.
Was bedeutet das? Nun, unterschiedliche Objekte, also z.B. Daten im Speicher können gleiche Werte haben.
Ganzzahl Objekte mit einem bestimmten Wert, sagen wir `1234`, kann es beispielsweise mehrfach, unter verschiedenen Namen im Programm geben.
Wenn einer dieser Werte als `a`, der andere als `b` benannt ist, wäre `a is b` falsch, denn wir haben es mit unterschiedlichen Objekten zu tun. `a == b` ist hingegen wahr, schließlich tragen `a` und `b` den gleichen Wert.

Zu Beginn, werden wir häufiger `==`, aber fast nie `is` verwenden. Der Vergleich auf Objektidentität ist eher nur für einige  „Spezialfälle“ wichtig. In den meisten Fällen wollen wir Werte vergleichen.

\index{Vergleichsoperator}
\index{Operator!Vergleich}

Logische Operatoren
-------------------

\index{logischer Operator}
\index{Operator!logischer}

Es gibt drei *logische Operatoren*: `and`, `or`, und `not`. Die Semantik (Bedeutung) dieser Operatoren ist ähnlich wie ihre Bedeutung im Englischen. Zum Beispiel,

`x > 0 and x < 10`

ist nur wahr, wenn `x` größer als 0 *und* kleiner als 10 ist.

\index{and Operator}
\index{or Operator}
\index{not Operator}
\index{Operator!and}
\index{Operator!or}
\index{Operator!not}

`n%2 == 0 or n%3 == 0` ist wahr, wenn *eine* der beiden Bedingungen wahr ist, d.h. wenn die Zahl durch 2 *oder* 3 teilbar ist.

Schließlich negiert der Operator `not` einen booleschen Ausdruck, sodass `not (x > y)` wahr ist, wenn `x > y` falsch ist; das heißt, wenn `x` kleiner oder gleich `y` ist.

Streng genommen sollten die Operanden der logischen Operatoren boolesche Ausdrücke sein, aber Python ist nicht sehr streng. Jede Zahl ungleich Null wird als „wahr“ interpretiert.

~~~~ {.python}
>>> 17 and True
True
~~~~

Diese Flexibilität kann nützlich sein, aber es gibt einige Feinheiten, die verwirrend sein können. Wir sollten sie vielleicht vermeiden, bis wir sicher sind, dass wir wissen, was wir tun.

Bedingte Ausführung
-------------------

\index{bedingte Anweisung}
\index{Anweisung!bedingte}
\index{if (Anweisung)}
\index{Anweisung!if}
\index{bedingte Ausführung}

Um sinnvolle Programme zu schreiben, brauchen wir fast immer die Möglichkeit, Bedingungen zu prüfen und das Verhalten des Programms entsprechend zu ändern. *Bedingte Anweisungen* geben uns diese Fähigkeit. Die einfachste Form ist die `if`-Anweisung:

~~~~ {.python}
if x > 0:
    print('x is positive')
~~~~

Der boolesche Ausdruck nach der `if`-Anweisung wird als *Bedingung* bezeichnet. Wir beenden die `if`-Anweisung mit einem Doppelpunkt (:) und die Zeile(n) nach der if-Anweisung werden eingerückt.

![Ablaufdiagramm einer If-Anweisung](height=1.5in@../images/de/if)


Wenn die logische Bedingung wahr ist, dann wird die eingerückte Anweisung ausgeführt. Wenn die logische Bedingung falsch ist, wird die eingerückte Anweisung übersprungen.
Die *Einrückung* erfüllt hier **zwei** wesentliche Aufgaben im Programm.
Erstens: Sie macht das Programm besser lesbar. Man erkennt sofort, dass die Anweisung `print...` „unterhalb“ der Überprüfung mit `if` steht. Sie stehet also nicht auf gleicher *Ebene* wie das `if` selbst, sondern gehört sichtbar nur zu dem „Wahr-Teil“ der Überprüfung.
Zweitens: Statt der einen `print`-Anweisung könnten an der gleichen Stelle mehrere Anweisungen, und sogar wieder neue `if`-Anweisungen stehen. Alle Anweisungen mit der gleichen Einrückungstiefe gehören zur gleichen *Ebene* des Programms.

Die Verwendung von Einrückungen führt schnell zu Syntaxfehlern. Wenn Sie einmal nicht genau aufpassen und ein Leerzeichen zu viel oder zu wenig, oder auch ein Tab-Zeichen, statt mehrerer Leerzeichen verwenden, wird Python sich beschweren. Allerdings lassen sich diese Fehler sehr schnell finden. Außerdem helfen Ihnen die Editoren und Werkzeuge, die Sie zum Programmieren verwenden, die Einrückungstiefe beizubehalten.

Viele andere Programmiersprachen verwenden Klammern, um Blöcke von Anweisungen zusammenzufassen. Dies erscheint auf den ersten Blick logischer, als mit Leerzeichen und Zeilen zu arbeiten. Klammern haben aber zwei große Nachteile. Zum einen benötigt man zusätzliche Zeichen, die den Programmcode verlängern und unübersichtlicher machen. Zum anderen ist man, wenn man Klammern verwendet, nicht dazu gezwungen, eine gute optische Aufteilung des Codes in Ebenen einzuhalten. Gerade Programmieranfänger halten sich oft nicht an Formatierungsregeln und leider führt das oft zu logischen Fehlern, die nur sehr schwierig aufzuspüren sind.

\index{Einrückung}
\index{Block!Einrückung}
\index{Bedingung}
\index{zusammengesetzte Anweisung}
\index{Anweisung!zusammengesetzte}

Der Aufbau von `if`-Anweisungen ähnelt dem von Funktionsdefinitionen oder `for`-Schleifen^[Funktionen werden wir in Kapitel 4 und Schleifen in Kapitel 5 kennenlernen.]. Die Anweisung besteht aus einer Kopfzeile, die mit einem Doppelpunkt (`:`) endet, gefolgt von einem eingerückten Block. Anweisungen wie diese werden *zusammengesetzte Anweisungen* genannt, weil sie sich über mehr als eine Zeile erstrecken.

Es gibt keine Begrenzung für die Anzahl der Anweisungen, die im Rumpf erscheinen können, aber es muss mindestens eine geben. Gelegentlich ist es nützlich, einen Block ohne Anweisungen zu haben (normalerweise als Platzhalter für Code, den wir noch nicht geschrieben haben). In diesem Fall können wir die Anweisung `pass` verwenden, die nichts tut.

\index{pass (Anweisung)}
\index{Anweisung!pass}

~~~~ {.python}
if x < 0:
    pass          # need to handle negative values!
~~~~

Wenn wir im Python-Interpreter eine `if`-Anweisung eingeben, ändert sich die Eingabeaufforderung von drei Größer-Zeichen zu drei Punkten, um anzuzeigen, dass wir uns in der Mitte eines Anweisungsblocks befinden, wie unten gezeigt:

~~~~ {.python}
>>> x = 3
>>> if x < 10:
...    print('x ist klein')
...
x ist klein
>>>
~~~~

Wenn wir den Python-Interpreter verwenden, müssen wir am Ende eines Blocks eine Leerzeile stehen lassen, sonst gibt Python einen Fehler zurück:

~~~~ {.python}
>>> x = 3
>>> if x < 10:
...    print('x ist klein')
... print('Fertig')
  File "<stdin>", line 3
    print('Fertig')
        ^
SyntaxError: invalid syntax
~~~~

Eine Leerzeile am Ende eines Anweisungsblocks ist beim Schreiben und Ausführen eines Scripts nicht notwendig, kann aber die Lesbarkeit unseres Codes verbessern.

Alternative Ausführung
----------------------

\index{alternative Ausführung}
\index{else (Schlüsselwort)}
\index{Schlüsselwort!else}

Eine zweite Form der `if`-Anweisung ist die *alternative Ausführung*, bei der es zwei Möglichkeiten gibt und die Bedingung bestimmt, welche davon ausgeführt wird. Die Syntax sieht wie folgt aus:

~~~~ {.python}
if x%2 == 0:
    print('x ist gerade')
else:
    print('x ist ungerade')
~~~~

Wenn der Rest bei der Division von `x` durch 2 gleich 0 ist, dann wissen wir, dass `x` gerade ist, und das Programm gibt eine entsprechende Meldung aus. Wenn die Bedingung falsch ist, wird der zweite Block von Anweisungen ausgeführt.

![Ablaufdiagramm einer If-Else-Anweisung](height=1.5in@../images/de/if-else)

Da die Bedingung entweder wahr oder falsch sein muss, wird genau eine der Alternativen ausgeführt. Die Alternativen werden *Verzweigungen* genannt, weil sie Verzweigungen im Ablauf der Ausführung sind.

\index{Verzweigung}

Verkettete Bedingungen
----------------------

\index{verkettete Bedingung}
\index{Bedingung!verkettete}

Manchmal gibt es mehr als zwei Möglichkeiten und wir brauchen mehr als zwei Verzweigungen. Eine Art, dies zu erreichen, sind *verkettete Bedingungen*:

~~~~ {.python}
if x < y:
    print('x ist kleiner als y')
elif x > y:
    print('x ist groesser als y')
else:
    print('x und y sind gleich')
~~~~

`elif` ist eine Abkürzung für „else if“. Auch hier wird genau eine Verzweigung ausgeführt.

![If-Then-ElseIf Logic](height=2.0in@../images/elif)

Es gibt keine Begrenzung für die Anzahl der `elif`-Anweisungen. Wenn es eine `else`-Klausel gibt, muss sie am Ende stehen, aber es muss nicht unbedingt eine geben.

\index{elif (Schlüsselwort)}
\index{Schlüsselwort!elif}

~~~~ {.python}
if choice == 'a':
    print('Nicht richtig!')
elif choice == 'b':
    print('Richtig!')
elif choice == 'c':
    print('Fast, aber nicht richtig!')
~~~~

Jede Bedingung wird der Reihe nach geprüft. Wenn die erste falsch ist, wird die nächste geprüft, und so weiter. Wenn eine von ihnen wahr ist, wird der entsprechende Zweig ausgeführt und die Anweisung endet. Auch wenn mehr als eine Bedingung wahr ist, wird nur der erste wahre Zweig ausgeführt.

Verschachtelte Bedingungen
--------------------------

\index{verschachtelte Bedingung}
\index{Bedingung!verschachtelte}

Eine Bedingung kann auch in eine andere verschachtelt werden. Wir hätten das Beispiel mit den drei Verzweigungen auch so schreiben können:

~~~~ {.python}
if x == y:
    print('x und y sind gleich')
else:
    if x < y:
        print('x it kleiner als y')
    else:
        print('x ist groesser als y')
~~~~

Die äußere Bedingung enthält zwei Verzweigungen. Der erste Zweig enthält eine einfache Anweisung. Der zweite Zweig enthält eine weitere `if`-Anweisung, die ihrerseits zwei Zweige hat. Diese beiden Zweige sind beide einfache Anweisungen, obwohl sie auch bedingte Anweisungen hätten sein können.

![Nested If Statements](height=2.0in@../images/nested)

Obwohl die Einrückung der Anweisungen die Struktur deutlich macht, werden *verschachtelte Bedingungen* sehr schnell unübersichtlich. Im Allgemeinen ist es eine gute Idee, sie wenn möglich zu vermeiden.

Logische Operatoren bieten oft eine Möglichkeit, verschachtelte bedingte Anweisungen zu vereinfachen. Zum Beispiel können wir den folgenden Code mit einer einzigen Bedingung umschreiben:

~~~~ {.python}
if 0 < x:
    if x < 10:
        print('x is a positive single-digit number.')
~~~~

Die `print`-Anweisung wird nur ausgeführt, wenn wir es an beiden Bedingungen vorbeischaffen, also können wir den gleichen Effekt mit dem `and`-Operator erzielen:

~~~~ {.python}
if 0 < x and x < 10:
    print('x is a positive single-digit number.')
~~~~

Abfangen von Ausnahmen mittels try und except
---------------------------------------------

Im vorherigen Kapitel haben wir ein Codesegment gesehen, in dem wir die Funktionen `input` und `int` verwendet haben, um eine vom Benutzer eingegebene Ganzzahl zu lesen und zu analysieren. Wir haben auch gesehen, wie tückisch dies sein kann:


~~~~ {.python}
>>> speed = input(prompt)
Was ist die Fluggeschwindigkeit einer unbeladenen Schwalbe?
Meinst du eine europäische oder eine afrikanische Schwalbe?
>>> int(speed)
ValueError: invalid literal for int() with base 10:
~~~~

Wenn wir diese Anweisungen im Python-Interpreter ausführen, erhalten wir eine neue Eingabeaufforderung vom Interpreter, denken „ups“ und machen mit der nächsten Anweisung weiter.

Wenn wir diesen Code jedoch in ein Python-Skript einfügen und dieser Fehler auftritt, bleibt unser Skript sofort mit einem *Traceback* stehen. Es führt die folgende Anweisung nicht aus.

\index{Traceback}

Hier ist ein Beispielprogramm zur Umrechnung einer Fahrenheit-Temperatur in eine Celsius-Temperatur:

\VerbatimInput{../code3/fahren.py}

Probieren wir diesen Code einmal mit einer korrekten Eingabe, z.B. mit 99 °F:

~~~~
python fahren.py
Gib die Temperatur in Fahrenheit ein: 99
37.22222222222222
~~~~

Das sieht korrekt aus.
Wenn wir aber nun diesen Code erneut ausführen und ihm eine ungültige Eingabe geben, bricht er einfach mit einer unfreundlichen Fehlermeldung ab:

~~~~
python fahren.py
Enter Fahrenheit Temperature:fred
Traceback (most recent call last):
  File "fahren.py", line 2, in <module>
    fahr = float(inp)
ValueError: could not convert string to float: 'fred'
~~~~

Es gibt eine in Python eingebaute Struktur für die bedingte Ausführung, um diese Arten von erwarteten und unerwarteten Fehlern zu behandeln, die „try/except“ genannt wird. Die Idee von `try` und `except` ist, dass wir wissen, dass eine Folge von Anweisungen ein Problem haben könnte und wir einige Anweisungen hinzufügen möchten, die ausgeführt werden, wenn ein Fehler auftritt. Diese zusätzlichen Anweisungen (der *except-Block*) werden ignoriert, wenn kein Fehler auftritt.

Man kann sich die `try`- und `except`-Funktion in Python als eine „Versicherungspolice“ für eine Folge von Anweisungen vorstellen.

Wir können unseren Temperaturwandler wie folgt umschreiben:

\VerbatimInput{../code3/fahren2.py}

Python beginnt mit der Ausführung der Anweisungsfolge im `try`-Block. Wenn alles gut geht, überspringt es den `except`-Block und fährt fort. Wenn im `try`-Block eine *Ausnahme* (englisch *Exception*) auftritt, springt Python aus dem `try`-Block heraus und führt die Folge von Anweisungen im `except`-Block aus.

~~~~
python fahren2.py
Gib die Temperatur in Fahrenheit ein: 99
37.22222222222222
~~~~

~~~~
python fahren2.py
Gib die Temperatur in Fahrenheit ein: fred
Bitte gib eine Zahl ein!
~~~~

\index{Ausnahme}

Die Behandlung einer Ausnahme mit einer `try`-Anweisung wird als *Fangen* einer Ausnahme bezeichnet. In diesem Beispiel gibt die `except`-Klausel eine Fehlermeldung aus. Im Allgemeinen gibt Ihnen das Abfangen einer Ausnahme die Möglichkeit, das Problem zu beheben, es erneut zu versuchen oder zumindest das Programm ordnungsgemäß zu beenden.

Abgekürzte Auswertung logischer Ausdrücke
-----------------------------------------

\index{verkürzte Auswertung}\index{short circuit}

Wenn Python einen logischen Ausdruck wie `x >= 2 and (x/y) > 2` verarbeitet, wertet es den Ausdruck von links nach rechts aus. Aufgrund der Definition von `and` ist, wenn `x` kleiner als 2 ist, der Ausdruck `x >= 2` logisch falsch (also gleich `False`) und somit ist der gesamte Ausdruck `False`, unabhängig davon, ob `(x/y) > 2` als `True` oder `False` ausgewertet wird.

Wenn Python feststellt, dass durch die Auswertung des restlichen Teils eines logischen Ausdrucks sich am Endergebnis nichts mehr ändern wird, bricht es die Auswertung ab und führt die Berechnungen im restlichen Teil des logischen Ausdrucks nicht aus. Wenn die Auswertung eines logischen Ausdrucks stoppt, weil der Gesamtwert bereits bekannt ist, bezeichnet man dies als *abgekürzte Auswertung* (englisch *short-circuit evaluation* oder *short-circuiting*).

\index{Wächter-Muster}
\index{Muster!Wächter}

Auch wenn dies wie eine Kleinigkeit erscheinen mag, führt die abgekürzte Auswertung zu einer cleveren Technik, die als *Wächter-Muster* (englisch *guardian pattern*) bezeichnet wird. Betrachten wir die folgende Codesequenz im Python-Interpreter:

~~~~ {.python}
>>> x = 6
>>> y = 2
>>> x >= 2 and (x/y) > 2
True
>>> x = 1
>>> y = 0
>>> x >= 2 and (x/y) > 2
False
>>> x = 6
>>> y = 0
>>> x >= 2 and (x/y) > 2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>>
~~~~

Die dritte Berechnung schlug fehl, weil Python `(x/y)` auswertete und `y` null war, was einen Laufzeitfehler (`division by zero`) verursacht. Eine Division durch null ist mathematisch nicht definiert, Python *kann* die Berechnung also nicht durchführen (und Sie wissen ja, dass Python nicht „rät“).
Allerdings schlug das zweite Beispiel *nicht* fehl, obwohl hier auch `(x/y) > 2` stand und `y` zu dem Zeitpunkt den Wert `0` hatte. Dass es zu keinem Fehler kam, liegt daran, dass der erste Teil dieses Ausdrucks `x >= 2` zu `False` ausgewertet wurde, sodass `(x/y)` aufgrund der *abgekürzten Auswertung* nie ausgeführt wurde und es damit keinen Fehler gab.

Wir können den logischen Ausdruck so konstruieren, dass wir strategisch eine *Schutz*-Auswertung direkt vor der Auswertung platzieren, die einen Fehler verursachen könnte, wie folgt:

~~~~ {.python}
>>> x = 1
>>> y = 0
>>> x >= 2 and y != 0 and (x/y) > 2
False
>>> x = 6
>>> y = 0
>>> x >= 2 and y != 0 and (x/y) > 2
False
>>>
~~~~

Im ersten logischen Ausdruck ist `x >= 2` `False`, also stoppt die Auswertung am ersten `and`. Im zweiten logischen Ausdruck ist `x >= 2` `True`, aber `y != 0` ist `False`, also erreichen wir nie `(x/y)`.
Die Bedingung `y != 0` dient hier also als *Schutz*, um sicherzustellen, dass wir `(x/y)` nur ausführen, wenn `y` ungleich Null ist.

Unbedingt beachten müssen wir allerdings die Auswertung von links nach rechts.
Im folgenden Beispiel folgt der Schutz-Klausel `y != 0` *nach* der `(x/y)` Berechnung, sodass der Ausdruck mit einem Fehler fehlschlägt.

~~~~ {.python}
>>> x = 6
>>> y = 0
>>> x >= 2 and (x/y) > 2 and y != 0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>>
~~~~


Debugging
---------

\index{Debugging}
\index{Traceback}

Der *Traceback*, den Python beim Auftreten eines Fehlers anzeigt, enthält eine Menge Informationen, die aber überwältigend sein können. Die nützlichsten Teile sind normalerweise:

-   welche Art von Fehler es war, und

-   wo er aufgetreten ist.

Syntaxfehler sind in der Regel leicht zu finden, aber es gibt ein paar Tücken. Whitespace-Fehler können schwierig sein, weil Leerzeichen und Tabulatoren unsichtbar sind und wir gewohnt sind, sie zu ignorieren.

\index{Whitespace}

~~~~ {.python}
>>> x = 5
>>>  y = 6
  File "<stdin>", line 1
    y = 6
    ^
IndentationError: unexpected indent
~~~~

In diesem Beispiel besteht das Problem darin, dass die zweite Zeile um ein Leerzeichen eingerückt ist. Aber die Fehlermeldung zeigt auf `y`, was irreführend ist. Im Allgemeinen zeigen Fehlermeldungen an, wo das Problem entdeckt wurde, aber der tatsächliche Fehler kann früher im Code liegen, manchmal in einer vorhergehenden Zeile.

Im Allgemeinen wird in den Fehlermeldungen angegeben, wo das Problem entdeckt wurde, aber das ist oft nicht die Ursache des Problems.

Glossar
-------

Block
:   Die Folge von Anweisungen innerhalb einer zusammengesetzten Anweisung.
\index{Block}

boolescher Ausdruck
:   Ein Ausdruck, dessen Wert entweder `True` oder `False` ist.
\index{boolescher Ausdruck}
\index{Ausdruck!boolescher}

Verzweigung
:   Eine der alternativen Anweisungsfolgen in einer bedingten Anweisung.
\index{Verzweigung}

verkettete Bedingungen
:   Eine bedingte Anweisung mit einer Reihe von alternativen Verzweigungen.
\index{verkettete Bedingung}
\index{Bedingung!verkettete}

Vergleichsoperator
:   Einer der Operatoren, der seine Operanden vergleicht: `==`, `!=`, `>`, `<`, `>=`, and `<=`.

bedingte Anweisung
:   Eine Anweisung, die den Ablauf der Ausführung in Abhängigkeit von einer Bedingung steuert.
\index{bedingte Anweisung}
\index{Anweisung!bedingte}

Bedingung
:   Der boolesche Ausdruck in einer bedingten Anweisung, der bestimmt, welcher Zweig ausgeführt wird.
\index{Bedingung}

zusammengesetzte Anweisung
:   Eine Anweisung, die aus einer Kopfzeile und einem Rumpf besteht. Die Kopfzeile endet mit einem Doppelpunkt (`:`). Der Rumpf wird relativ zur Kopfzeile eingerückt.
\index{zusammengesetzte Anweisung}

logischer Operator
:   Einer der Operatoren, der boolesche Ausdrücke kombiniert: `and`, `or`, und `not`.

verschachtelte Bedingung
:   Eine bedingte Anweisung, die in einem der Zweige einer anderen bedingten Anweisung erscheint.
\index{verschachtelte Bedingung}
\index{Bedingung!verschachtelte}

Traceback
:   Eine Auflistung aller ausgeführten Funktionen, die beim Auftreten einer Ausnahme ausgegeben wird.
\index{Traceback}

abgekürzte Auswertung
:   Wenn Python die Auswertung eines logischen Ausdrucks teilweise durchläuft und die Auswertung anhält, weil Python den Endwert für den Ausdruck kennt, ohne den Rest des Ausdrucks auswerten zu müssen.
\index{verkürzte Auswertung}\index{short circuit}

Übungen
-------

**Übung 1: Schreiben Sie Ihr Programm zur Lohnberechnung so um, dass ein Mitarbeiter das 1,5-fache des Stundensatzes für Arbeitsstunden über 40 Stunden erhält.**

~~~~
Anzahl Arbeitsstunden: 45
Stundenlohn: 10
Monatsgehalt: 475.0
~~~~

**Übung 2: Schreiben Sie Ihr Programm zur Lohnberechnung unter Verwendung von `try` und `except` so um, dass Ihr es nichtnumerische Eingaben elegant behandelt, indem es eine Meldung ausgibt und das Programm beendet. Im Folgenden sehen Sie zwei beispielhafte Ausführungen des Programms:**

~~~~
Anzahl Arbeitsstunden: 20
Stundenlohn: neun
Fehler, bitte gib eine Zahl ein
~~~~

~~~~
Anzahl Arbeitsstunden: vierzig
Fehler, bitte gib eine Zahl ein
~~~~

    **Übung 3: Schreiben Sie ein Programm, das nach einem Wert zwischen 0,0 und 1,0 fragt. Wenn die Punktzahl außerhalb des Bereichs liegt, geben Sie eine Fehlermeldung aus. Wenn die Punktzahl zwischen 0,0 und 1,0 liegt, geben Sie eine Note anhand der folgenden Tabelle aus:**

    ~~~~
    Punkte   Note
    >= 0.9     1
    >= 0.8     2
    >= 0.7     3
    >= 0.6     4
    < 0.6     5
    ~~~~

    ~~~~
    Punkte eingeben: 0.95
    1
    ~~~~

    ~~~~
    Punkte eingeben: perfekt
    Falsche Punkanzahl
    ~~~~

    ~~~~
    Punkte eingeben: 10.0
    Falsche Punkanzahl
    ~~~~

    ~~~~
    Punkte eingeben: 0.75
    3
    ~~~~

    ~~~~
    Punkte eingeben: 0.5
    5   
    ~~~~

    Führen Sie das Programm wiederholt wie oben gezeigt aus, um die verschiedenen Werte für die Eingabe zu testen.

